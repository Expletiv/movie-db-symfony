<?php

namespace App\Dto\Tmdb\Responses\Configuration;

use Symfony\Component\Serializer\Annotation\SerializedName;
use Symfony\Component\Serializer\NameConverter\CamelCaseToSnakeCaseNameConverter;
use Symfony\Component\Serializer\Normalizer\ArrayDenormalizer;
use Symfony\Component\Serializer\Normalizer\ObjectNormalizer;
use Symfony\Component\Serializer\Serializer;

/**
 * This class was auto generated by the TMDB DTO Generator.
 * Do not edit this file manually!
 */
class ConfigurationDetailsImages
{
    #[SerializedName('base_url')]
    private ?string $baseUrl = null;
    #[SerializedName('secure_base_url')]
    private ?string $secureBaseUrl = null;
    /**
     * @var array<string>
     */
    #[SerializedName('backdrop_sizes')]
    private array $backdropSizes = [];
    /**
     * @var array<string>
     */
    #[SerializedName('logo_sizes')]
    private array $logoSizes = [];
    /**
     * @var array<string>
     */
    #[SerializedName('poster_sizes')]
    private array $posterSizes = [];
    /**
     * @var array<string>
     */
    #[SerializedName('profile_sizes')]
    private array $profileSizes = [];
    /**
     * @var array<string>
     */
    #[SerializedName('still_sizes')]
    private array $stillSizes = [];

    public static function fromArray(array $data = []): self
    {
        $serializer = new Serializer([new ObjectNormalizer(nameConverter: new CamelCaseToSnakeCaseNameConverter()), new ArrayDenormalizer()]);
        return $serializer->denormalize($data, self::class);
    }

    public function toArray(): array
    {
        $serializer = new Serializer([new ObjectNormalizer(nameConverter: new CamelCaseToSnakeCaseNameConverter()), new ArrayDenormalizer()]);
        return $serializer->normalize($this);
    }

    public function getBaseUrl(): ?string
    {
        return $this->baseUrl;
    }

    public function setBaseUrl(?string $baseUrl): self
    {
        $this->baseUrl = $baseUrl;

        return $this;
    }

    public function getSecureBaseUrl(): ?string
    {
        return $this->secureBaseUrl;
    }

    public function setSecureBaseUrl(?string $secureBaseUrl): self
    {
        $this->secureBaseUrl = $secureBaseUrl;

        return $this;
    }

    /**
     * @return array<string>
     */
    public function getBackdropSizes(): array
    {
        return $this->backdropSizes;
    }

    /**
     * @param array<string> $backdropSizes
     */
    public function setBackdropSizes(array $backdropSizes): self
    {
        $this->backdropSizes = $backdropSizes;

        return $this;
    }

    /**
     * @return array<string>
     */
    public function getLogoSizes(): array
    {
        return $this->logoSizes;
    }

    /**
     * @param array<string> $logoSizes
     */
    public function setLogoSizes(array $logoSizes): self
    {
        $this->logoSizes = $logoSizes;

        return $this;
    }

    /**
     * @return array<string>
     */
    public function getPosterSizes(): array
    {
        return $this->posterSizes;
    }

    /**
     * @param array<string> $posterSizes
     */
    public function setPosterSizes(array $posterSizes): self
    {
        $this->posterSizes = $posterSizes;

        return $this;
    }

    /**
     * @return array<string>
     */
    public function getProfileSizes(): array
    {
        return $this->profileSizes;
    }

    /**
     * @param array<string> $profileSizes
     */
    public function setProfileSizes(array $profileSizes): self
    {
        $this->profileSizes = $profileSizes;

        return $this;
    }

    /**
     * @return array<string>
     */
    public function getStillSizes(): array
    {
        return $this->stillSizes;
    }

    /**
     * @param array<string> $stillSizes
     */
    public function setStillSizes(array $stillSizes): self
    {
        $this->stillSizes = $stillSizes;

        return $this;
    }
}