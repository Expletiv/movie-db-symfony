<?php

namespace App\Dto\Tmdb\Clients\CompanyApi;

use Symfony\Contracts\HttpClient\HttpClientInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Contracts\Cache\CacheInterface;
use App\Dto\Tmdb\Responses\Company\CompanyDetails;
use App\Dto\Tmdb\Responses\Company\CompanyAlternativeNames;
use App\Dto\Tmdb\Responses\Company\CompanyImages;

/**
 * This class was auto generated by the TMDB DTO Generator.
 * Do not edit this file manually!
 */
readonly class CompanyApiClient implements CompanyApiInterface
{
    public function __construct(
        private HttpClientInterface $tmdbHttpClient,
        private DenormalizerInterface $denormalizer,
        private CacheInterface $redis,
    )
    {
    }

    /**
     * /3/company/{company_id} - Get the company details by ID.
     */
    public function companyDetails(int $companyId): CompanyDetails
    {
        $url = strtr('/3/company/{company_id}', [
            '{company_id}' => $companyId,
        ]);
        $query = [
        ];

        $cacheKey = md5($url.'?'.http_build_query($query));
        return $this->redis->get($cacheKey, function ($item) use ($url, $query) {
            $item->expiresAfter(10800);
            $response = $this->tmdbHttpClient->request('GET', $url, ['query' => $query]);
            return $this->denormalizer->denormalize($response->toArray(), CompanyDetails::class);
        });
    }

    /**
     * /3/company/{company_id}/alternative_names - Get the company details by ID.
     */
    public function companyAlternativeNames(int $companyId): CompanyAlternativeNames
    {
        $url = strtr('/3/company/{company_id}/alternative_names', [
            '{company_id}' => $companyId,
        ]);
        $query = [
        ];

        $cacheKey = md5($url.'?'.http_build_query($query));
        return $this->redis->get($cacheKey, function ($item) use ($url, $query) {
            $item->expiresAfter(10800);
            $response = $this->tmdbHttpClient->request('GET', $url, ['query' => $query]);
            return $this->denormalizer->denormalize($response->toArray(), CompanyAlternativeNames::class);
        });
    }

    /**
     * /3/company/{company_id}/images - Get the company logos by id.
     */
    public function companyImages(int $companyId): CompanyImages
    {
        $url = strtr('/3/company/{company_id}/images', [
            '{company_id}' => $companyId,
        ]);
        $query = [
        ];

        $cacheKey = md5($url.'?'.http_build_query($query));
        return $this->redis->get($cacheKey, function ($item) use ($url, $query) {
            $item->expiresAfter(10800);
            $response = $this->tmdbHttpClient->request('GET', $url, ['query' => $query]);
            return $this->denormalizer->denormalize($response->toArray(), CompanyImages::class);
        });
    }
}