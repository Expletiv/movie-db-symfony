<?php

namespace App\Dto\Tmdb\Clients\SearchApi;

use Symfony\Contracts\HttpClient\HttpClientInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Contracts\Cache\CacheInterface;
use App\Dto\Tmdb\Responses\Search\SearchMovie;
use App\Dto\Tmdb\Responses\Search\SearchTv;
use App\Dto\Tmdb\Responses\Search\SearchMulti;
use App\Dto\Tmdb\Responses\Search\SearchPerson;
use App\Dto\Tmdb\Responses\Search\SearchCompany;
use App\Dto\Tmdb\Responses\Search\SearchCollection;
use App\Dto\Tmdb\Responses\Search\SearchKeyword;

/**
 * This class was auto generated by the TMDB DTO Generator.
 * Do not edit this file manually!
 */
readonly class SearchApiClient implements SearchApiInterface
{
    public function __construct(
        private HttpClientInterface $tmdbHttpClient,
        private DenormalizerInterface $denormalizer,
        private CacheInterface $redis,
    )
    {
    }

    /**
     * /3/search/movie - Search for movies by their original, translated and alternative titles.
     */
    public function searchMovie(string $query, ?string $year = null, ?string $region = null, ?int $page = 1, ?string $primaryReleaseYear = null, ?string $language = 'en-US', ?bool $includeAdult = false): SearchMovie
    {
        $url = strtr('/3/search/movie', [
        ]);
        $query = [
            'query' => $query,
            'include_adult' => $includeAdult,
            'language' => $language,
            'primary_release_year' => $primaryReleaseYear,
            'page' => $page,
            'region' => $region,
            'year' => $year,
        ];

        $cacheKey = md5($url.'?'.http_build_query($query));
        return $this->redis->get($cacheKey, function ($item) use ($url, $query) {
            $item->expiresAfter(10800);
            $response = $this->tmdbHttpClient->request('GET', $url, ['query' => $query]);
            return $this->denormalizer->denormalize($response->toArray(), SearchMovie::class);
        });
    }

    /**
     * /3/search/tv - Search for TV shows by their original, translated and also known as names.
     * @param ?int $year Search the first air date and all episode air dates. Valid values are: 1000..9999
     * @param ?int $firstAirDateYear Search only the first air date. Valid values are: 1000..9999
     */
    public function searchTv(string $query, ?int $year = null, ?int $page = 1, ?string $language = 'en-US', ?bool $includeAdult = false, ?int $firstAirDateYear = null): SearchTv
    {
        $url = strtr('/3/search/tv', [
        ]);
        $query = [
            'query' => $query,
            'first_air_date_year' => $firstAirDateYear,
            'include_adult' => $includeAdult,
            'language' => $language,
            'page' => $page,
            'year' => $year,
        ];

        $cacheKey = md5($url.'?'.http_build_query($query));
        return $this->redis->get($cacheKey, function ($item) use ($url, $query) {
            $item->expiresAfter(10800);
            $response = $this->tmdbHttpClient->request('GET', $url, ['query' => $query]);
            return $this->denormalizer->denormalize($response->toArray(), SearchTv::class);
        });
    }

    /**
     * /3/search/multi - Use multi search when you want to search for movies, TV shows and people in a single request.
     */
    public function searchMulti(string $query, ?int $page = 1, ?string $language = 'en-US', ?bool $includeAdult = false): SearchMulti
    {
        $url = strtr('/3/search/multi', [
        ]);
        $query = [
            'query' => $query,
            'include_adult' => $includeAdult,
            'language' => $language,
            'page' => $page,
        ];

        $cacheKey = md5($url.'?'.http_build_query($query));
        return $this->redis->get($cacheKey, function ($item) use ($url, $query) {
            $item->expiresAfter(10800);
            $response = $this->tmdbHttpClient->request('GET', $url, ['query' => $query]);
            return $this->denormalizer->denormalize($response->toArray(), SearchMulti::class);
        });
    }

    /**
     * /3/search/person - Search for people by their name and also known as names.
     */
    public function searchPerson(string $query, ?int $page = 1, ?string $language = 'en-US', ?bool $includeAdult = false): SearchPerson
    {
        $url = strtr('/3/search/person', [
        ]);
        $query = [
            'query' => $query,
            'include_adult' => $includeAdult,
            'language' => $language,
            'page' => $page,
        ];

        $cacheKey = md5($url.'?'.http_build_query($query));
        return $this->redis->get($cacheKey, function ($item) use ($url, $query) {
            $item->expiresAfter(10800);
            $response = $this->tmdbHttpClient->request('GET', $url, ['query' => $query]);
            return $this->denormalizer->denormalize($response->toArray(), SearchPerson::class);
        });
    }

    /**
     * /3/search/company - Search for companies by their original and alternative names.
     */
    public function searchCompany(string $query, ?int $page = 1): SearchCompany
    {
        $url = strtr('/3/search/company', [
        ]);
        $query = [
            'query' => $query,
            'page' => $page,
        ];

        $cacheKey = md5($url.'?'.http_build_query($query));
        return $this->redis->get($cacheKey, function ($item) use ($url, $query) {
            $item->expiresAfter(10800);
            $response = $this->tmdbHttpClient->request('GET', $url, ['query' => $query]);
            return $this->denormalizer->denormalize($response->toArray(), SearchCompany::class);
        });
    }

    /**
     * /3/search/collection - Search for collections by their original, translated and alternative names.
     */
    public function searchCollection(string $query, ?string $region = null, ?int $page = 1, ?string $language = 'en-US', ?bool $includeAdult = false): SearchCollection
    {
        $url = strtr('/3/search/collection', [
        ]);
        $query = [
            'query' => $query,
            'include_adult' => $includeAdult,
            'language' => $language,
            'page' => $page,
            'region' => $region,
        ];

        $cacheKey = md5($url.'?'.http_build_query($query));
        return $this->redis->get($cacheKey, function ($item) use ($url, $query) {
            $item->expiresAfter(10800);
            $response = $this->tmdbHttpClient->request('GET', $url, ['query' => $query]);
            return $this->denormalizer->denormalize($response->toArray(), SearchCollection::class);
        });
    }

    /**
     * /3/search/keyword - Search for keywords by their name.
     */
    public function searchKeyword(string $query, ?int $page = 1): SearchKeyword
    {
        $url = strtr('/3/search/keyword', [
        ]);
        $query = [
            'query' => $query,
            'page' => $page,
        ];

        $cacheKey = md5($url.'?'.http_build_query($query));
        return $this->redis->get($cacheKey, function ($item) use ($url, $query) {
            $item->expiresAfter(10800);
            $response = $this->tmdbHttpClient->request('GET', $url, ['query' => $query]);
            return $this->denormalizer->denormalize($response->toArray(), SearchKeyword::class);
        });
    }
}