<?php

namespace App\Dto\Tmdb\Clients\AccountApi;

use Symfony\Contracts\HttpClient\HttpClientInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Contracts\Cache\CacheInterface;
use App\Dto\Tmdb\Responses\Account\AccountDetails;
use App\Dto\Tmdb\Responses\Account\AccountLists;
use App\Dto\Tmdb\Responses\Account\AccountGetFavorites;
use App\Dto\Tmdb\Responses\Account\AccountFavoriteTv;
use App\Dto\Tmdb\Responses\Account\AccountRatedMovies;
use App\Dto\Tmdb\Responses\Account\AccountRatedTv;
use App\Dto\Tmdb\Responses\Account\AccountRatedTvEpisodes;
use App\Dto\Tmdb\Responses\Account\AccountWatchlistMovies;
use App\Dto\Tmdb\Responses\Account\AccountWatchlistTv;

/**
 * This class was auto generated by the TMDB DTO Generator.
 * Do not edit this file manually!
 */
readonly class AccountApiClient implements AccountApiInterface
{
    public function __construct(
        private HttpClientInterface $tmdbHttpClient,
        private DenormalizerInterface $denormalizer,
        private CacheInterface $redis,
    )
    {
    }

    /**
     * /3/account/{account_id}
     */
    public function accountDetails(int $accountId, ?string $sessionId = null): AccountDetails
    {
        $url = strtr('/3/account/{account_id}', [
            '{account_id}' => $accountId,
        ]);
        $query = [
            'session_id' => $sessionId,
        ];

        $cacheKey = md5($url.'?'.http_build_query($query));
        return $this->redis->get($cacheKey, function ($item) use ($url, $query) {
            $item->expiresAfter(10800);
            $response = $this->tmdbHttpClient->request('GET', $url, ['query' => $query]);
            return $this->denormalizer->denormalize($response->toArray(), AccountDetails::class);
        });
    }

    /**
     * /3/account/{account_id}/lists
     */
    public function accountLists(int $accountId, ?string $sessionId = null, ?int $page = 1): AccountLists
    {
        $url = strtr('/3/account/{account_id}/lists', [
            '{account_id}' => $accountId,
        ]);
        $query = [
            'page' => $page,
            'session_id' => $sessionId,
        ];

        $cacheKey = md5($url.'?'.http_build_query($query));
        return $this->redis->get($cacheKey, function ($item) use ($url, $query) {
            $item->expiresAfter(10800);
            $response = $this->tmdbHttpClient->request('GET', $url, ['query' => $query]);
            return $this->denormalizer->denormalize($response->toArray(), AccountLists::class);
        });
    }

    /**
     * /3/account/{account_id}/favorite/movies
     */
    public function accountGetFavorites(int $accountId, ?string $sortBy = 'created_at.asc', ?string $sessionId = null, ?int $page = 1, ?string $language = 'en-US'): AccountGetFavorites
    {
        $url = strtr('/3/account/{account_id}/favorite/movies', [
            '{account_id}' => $accountId,
        ]);
        $query = [
            'language' => $language,
            'page' => $page,
            'session_id' => $sessionId,
            'sort_by' => $sortBy,
        ];

        $cacheKey = md5($url.'?'.http_build_query($query));
        return $this->redis->get($cacheKey, function ($item) use ($url, $query) {
            $item->expiresAfter(10800);
            $response = $this->tmdbHttpClient->request('GET', $url, ['query' => $query]);
            return $this->denormalizer->denormalize($response->toArray(), AccountGetFavorites::class);
        });
    }

    /**
     * /3/account/{account_id}/favorite/tv
     */
    public function accountFavoriteTv(int $accountId, ?string $sortBy = 'created_at.asc', ?string $sessionId = null, ?int $page = 1, ?string $language = 'en-US'): AccountFavoriteTv
    {
        $url = strtr('/3/account/{account_id}/favorite/tv', [
            '{account_id}' => $accountId,
        ]);
        $query = [
            'language' => $language,
            'page' => $page,
            'session_id' => $sessionId,
            'sort_by' => $sortBy,
        ];

        $cacheKey = md5($url.'?'.http_build_query($query));
        return $this->redis->get($cacheKey, function ($item) use ($url, $query) {
            $item->expiresAfter(10800);
            $response = $this->tmdbHttpClient->request('GET', $url, ['query' => $query]);
            return $this->denormalizer->denormalize($response->toArray(), AccountFavoriteTv::class);
        });
    }

    /**
     * /3/account/{account_id}/rated/movies
     */
    public function accountRatedMovies(int $accountId, ?string $sortBy = 'created_at.asc', ?string $sessionId = null, ?int $page = 1, ?string $language = 'en-US'): AccountRatedMovies
    {
        $url = strtr('/3/account/{account_id}/rated/movies', [
            '{account_id}' => $accountId,
        ]);
        $query = [
            'language' => $language,
            'page' => $page,
            'session_id' => $sessionId,
            'sort_by' => $sortBy,
        ];

        $cacheKey = md5($url.'?'.http_build_query($query));
        return $this->redis->get($cacheKey, function ($item) use ($url, $query) {
            $item->expiresAfter(10800);
            $response = $this->tmdbHttpClient->request('GET', $url, ['query' => $query]);
            return $this->denormalizer->denormalize($response->toArray(), AccountRatedMovies::class);
        });
    }

    /**
     * /3/account/{account_id}/rated/tv
     */
    public function accountRatedTv(int $accountId, ?string $sortBy = 'created_at.asc', ?string $sessionId = null, ?int $page = 1, ?string $language = 'en-US'): AccountRatedTv
    {
        $url = strtr('/3/account/{account_id}/rated/tv', [
            '{account_id}' => $accountId,
        ]);
        $query = [
            'language' => $language,
            'page' => $page,
            'session_id' => $sessionId,
            'sort_by' => $sortBy,
        ];

        $cacheKey = md5($url.'?'.http_build_query($query));
        return $this->redis->get($cacheKey, function ($item) use ($url, $query) {
            $item->expiresAfter(10800);
            $response = $this->tmdbHttpClient->request('GET', $url, ['query' => $query]);
            return $this->denormalizer->denormalize($response->toArray(), AccountRatedTv::class);
        });
    }

    /**
     * /3/account/{account_id}/rated/tv/episodes
     */
    public function accountRatedTvEpisodes(int $accountId, ?string $sortBy = 'created_at.asc', ?string $sessionId = null, ?int $page = 1, ?string $language = 'en-US'): AccountRatedTvEpisodes
    {
        $url = strtr('/3/account/{account_id}/rated/tv/episodes', [
            '{account_id}' => $accountId,
        ]);
        $query = [
            'language' => $language,
            'page' => $page,
            'session_id' => $sessionId,
            'sort_by' => $sortBy,
        ];

        $cacheKey = md5($url.'?'.http_build_query($query));
        return $this->redis->get($cacheKey, function ($item) use ($url, $query) {
            $item->expiresAfter(10800);
            $response = $this->tmdbHttpClient->request('GET', $url, ['query' => $query]);
            return $this->denormalizer->denormalize($response->toArray(), AccountRatedTvEpisodes::class);
        });
    }

    /**
     * /3/account/{account_id}/watchlist/movies
     */
    public function accountWatchlistMovies(int $accountId, ?string $sortBy = 'created_at.asc', ?string $sessionId = null, ?int $page = 1, ?string $language = 'en-US'): AccountWatchlistMovies
    {
        $url = strtr('/3/account/{account_id}/watchlist/movies', [
            '{account_id}' => $accountId,
        ]);
        $query = [
            'language' => $language,
            'page' => $page,
            'session_id' => $sessionId,
            'sort_by' => $sortBy,
        ];

        $cacheKey = md5($url.'?'.http_build_query($query));
        return $this->redis->get($cacheKey, function ($item) use ($url, $query) {
            $item->expiresAfter(10800);
            $response = $this->tmdbHttpClient->request('GET', $url, ['query' => $query]);
            return $this->denormalizer->denormalize($response->toArray(), AccountWatchlistMovies::class);
        });
    }

    /**
     * /3/account/{account_id}/watchlist/tv
     */
    public function accountWatchlistTv(int $accountId, ?string $sortBy = 'created_at.asc', ?string $sessionId = null, ?int $page = 1, ?string $language = 'en-US'): AccountWatchlistTv
    {
        $url = strtr('/3/account/{account_id}/watchlist/tv', [
            '{account_id}' => $accountId,
        ]);
        $query = [
            'language' => $language,
            'page' => $page,
            'session_id' => $sessionId,
            'sort_by' => $sortBy,
        ];

        $cacheKey = md5($url.'?'.http_build_query($query));
        return $this->redis->get($cacheKey, function ($item) use ($url, $query) {
            $item->expiresAfter(10800);
            $response = $this->tmdbHttpClient->request('GET', $url, ['query' => $query]);
            return $this->denormalizer->denormalize($response->toArray(), AccountWatchlistTv::class);
        });
    }
}