<?php

namespace App\Dto\Tmdb\Clients\ListApi;

use Symfony\Contracts\HttpClient\HttpClientInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Contracts\Cache\CacheInterface;
use App\Dto\Tmdb\Responses\List\ListDetails;
use App\Dto\Tmdb\Responses\List\ListCheckItemStatus;

/**
 * This class was auto generated by the TMDB DTO Generator.
 * Do not edit this file manually!
 */
readonly class ListApiClient implements ListApiInterface
{
    public function __construct(
        private HttpClientInterface $tmdbHttpClient,
        private DenormalizerInterface $denormalizer,
        private CacheInterface $redis,
    )
    {
    }

    /**
     * /3/list/{list_id}
     */
    public function listDetails(int $listId, ?int $page = 1, ?string $language = 'en-US'): ListDetails
    {
        $url = strtr('/3/list/{list_id}', [
            '{list_id}' => $listId,
        ]);
        $query = [
            'language' => $language,
            'page' => $page,
        ];

        $cacheKey = md5($url.'?'.http_build_query($query));
        return $this->redis->get($cacheKey, function ($item) use ($url, $query) {
            $item->expiresAfter(10800);
            $response = $this->tmdbHttpClient->request('GET', $url, ['query' => $query]);
            return $this->denormalizer->denormalize($response->toArray(), ListDetails::class);
        });
    }

    /**
     * /3/list/{list_id}/item_status - Use this method to check if an item has already been added to the list.
     */
    public function listCheckItemStatus(int $listId, ?int $movieId = null, ?string $language = 'en-US'): ListCheckItemStatus
    {
        $url = strtr('/3/list/{list_id}/item_status', [
            '{list_id}' => $listId,
        ]);
        $query = [
            'language' => $language,
            'movie_id' => $movieId,
        ];

        $cacheKey = md5($url.'?'.http_build_query($query));
        return $this->redis->get($cacheKey, function ($item) use ($url, $query) {
            $item->expiresAfter(10800);
            $response = $this->tmdbHttpClient->request('GET', $url, ['query' => $query]);
            return $this->denormalizer->denormalize($response->toArray(), ListCheckItemStatus::class);
        });
    }
}