<?php

namespace App\Dto\Tmdb\Clients\TvApi;

use Symfony\Contracts\HttpClient\HttpClientInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Contracts\Cache\CacheInterface;
use App\Dto\Tmdb\Responses\Tv\TvSeriesDetails;
use App\Dto\Tmdb\Responses\Tv\TvSeasonDetails;
use App\Dto\Tmdb\Responses\Tv\TvEpisodeDetails;
use App\Dto\Tmdb\Responses\Tv\TvSeriesImages;
use App\Dto\Tmdb\Responses\Tv\TvSeasonImages;
use App\Dto\Tmdb\Responses\Tv\TvEpisodeImages;
use App\Dto\Tmdb\Responses\Tv\TvSeriesAccountStates;
use App\Dto\Tmdb\Responses\Tv\TvEpisodeAccountStates;
use App\Dto\Tmdb\Responses\Tv\TvSeriesChanges;
use App\Dto\Tmdb\Responses\Tv\TvSeriesAiringTodayList;
use App\Dto\Tmdb\Responses\Tv\TvSeriesOnTheAirList;
use App\Dto\Tmdb\Responses\Tv\TvSeriesPopularList;
use App\Dto\Tmdb\Responses\Tv\TvSeriesTopRatedList;
use App\Dto\Tmdb\Responses\Tv\TvSeriesLatestId;
use App\Dto\Tmdb\Responses\Tv\TvSeriesAggregateCredits;
use App\Dto\Tmdb\Responses\Tv\TvSeriesAlternativeTitles;
use App\Dto\Tmdb\Responses\Tv\TvSeriesContentRatings;
use App\Dto\Tmdb\Responses\Tv\TvSeriesCredits;
use App\Dto\Tmdb\Responses\Tv\TvSeriesEpisodeGroups;
use App\Dto\Tmdb\Responses\Tv\TvSeriesExternalIds;
use App\Dto\Tmdb\Responses\Tv\TvSeriesKeywords;
use App\Dto\Tmdb\Responses\Tv\TvSeriesRecommendations;
use App\Dto\Tmdb\Responses\Tv\TvSeriesReviews;
use App\Dto\Tmdb\Responses\Tv\TvSeriesScreenedTheatrically;
use App\Dto\Tmdb\Responses\Tv\TvSeriesSimilar;
use App\Dto\Tmdb\Responses\Tv\TvSeriesTranslations;
use App\Dto\Tmdb\Responses\Tv\TvSeriesVideos;
use App\Dto\Tmdb\Responses\Tv\TvSeriesWatchProviders;
use App\Dto\Tmdb\Responses\Tv\TvSeasonAccountStates;
use App\Dto\Tmdb\Responses\Tv\TvSeasonAggregateCredits;
use App\Dto\Tmdb\Responses\Tv\TvSeasonChangesById;
use App\Dto\Tmdb\Responses\Tv\TvSeasonCredits;
use App\Dto\Tmdb\Responses\Tv\TvSeasonExternalIds;
use App\Dto\Tmdb\Responses\Tv\TvSeasonTranslations;
use App\Dto\Tmdb\Responses\Tv\TvSeasonVideos;
use App\Dto\Tmdb\Responses\Tv\TvEpisodeCredits;
use App\Dto\Tmdb\Responses\Tv\TvEpisodeExternalIds;
use App\Dto\Tmdb\Responses\Tv\TvEpisodeTranslations;
use App\Dto\Tmdb\Responses\Tv\TvEpisodeVideos;
use App\Dto\Tmdb\Responses\Tv\ChangesTvList;
use App\Dto\Tmdb\Responses\Tv\TvSeasonWatchProviders;
use App\Dto\Tmdb\Responses\Tv\TvEpisodeChangesById;
use App\Dto\Tmdb\Responses\Tv\TvEpisodeGroupDetails;
use App\Dto\Tmdb\Responses\Tv\ListsCopy;

/**
 * This class was auto generated by the TMDB DTO Generator.
 * Do not edit this file manually!
 */
readonly class TvApiClient implements TvApiInterface
{
    public function __construct(
        private HttpClientInterface $tmdbHttpClient,
        private DenormalizerInterface $denormalizer,
        private CacheInterface $redis,
    )
    {
    }

    /**
     * /3/tv/{series_id} - Get the details of a TV show.
     * @param ?string $appendToResponse comma separated list of endpoints within this namespace, 20 items max
     */
    public function tvSeriesDetails(int $seriesId, ?string $language = 'en-US', ?string $appendToResponse = null): TvSeriesDetails
    {
        $url = strtr('/3/tv/{series_id}', [
            '{series_id}' => $seriesId,
        ]);
        $query = [
            'append_to_response' => $appendToResponse,
            'language' => $language,
        ];

        $cacheKey = md5($url.'?'.http_build_query($query));
        return $this->redis->get($cacheKey, function ($item) use ($url, $query) {
            $item->expiresAfter(10800);
            $response = $this->tmdbHttpClient->request('GET', $url, ['query' => $query]);
            return $this->denormalizer->denormalize($response->toArray(), TvSeriesDetails::class);
        });
    }

    /**
     * /3/tv/{series_id}/season/{season_number} - Query the details of a TV season.
     * @param ?string $appendToResponse comma separated list of endpoints within this namespace, 20 items max
     */
    public function tvSeasonDetails(int $seasonNumber, int $seriesId, ?string $language = 'en-US', ?string $appendToResponse = null): TvSeasonDetails
    {
        $url = strtr('/3/tv/{series_id}/season/{season_number}', [
            '{series_id}' => $seriesId,
            '{season_number}' => $seasonNumber,
        ]);
        $query = [
            'append_to_response' => $appendToResponse,
            'language' => $language,
        ];

        $cacheKey = md5($url.'?'.http_build_query($query));
        return $this->redis->get($cacheKey, function ($item) use ($url, $query) {
            $item->expiresAfter(10800);
            $response = $this->tmdbHttpClient->request('GET', $url, ['query' => $query]);
            return $this->denormalizer->denormalize($response->toArray(), TvSeasonDetails::class);
        });
    }

    /**
     * /3/tv/{series_id}/season/{season_number}/episode/{episode_number} - Query the details of a TV episode.
     * @param ?string $appendToResponse comma separated list of endpoints within this namespace, 20 items max
     */
    public function tvEpisodeDetails(int $seasonNumber, int $episodeNumber, int $seriesId, ?string $language = 'en-US', ?string $appendToResponse = null): TvEpisodeDetails
    {
        $url = strtr('/3/tv/{series_id}/season/{season_number}/episode/{episode_number}', [
            '{series_id}' => $seriesId,
            '{season_number}' => $seasonNumber,
            '{episode_number}' => $episodeNumber,
        ]);
        $query = [
            'append_to_response' => $appendToResponse,
            'language' => $language,
        ];

        $cacheKey = md5($url.'?'.http_build_query($query));
        return $this->redis->get($cacheKey, function ($item) use ($url, $query) {
            $item->expiresAfter(10800);
            $response = $this->tmdbHttpClient->request('GET', $url, ['query' => $query]);
            return $this->denormalizer->denormalize($response->toArray(), TvEpisodeDetails::class);
        });
    }

    /**
     * /3/tv/{series_id}/images - Get the images that belong to a TV series.
     * @param ?string $includeImageLanguage specify a comma separated list of ISO-639-1 values to query, for example: `en,null`
     */
    public function tvSeriesImages(int $seriesId, ?string $language = null, ?string $includeImageLanguage = null): TvSeriesImages
    {
        $url = strtr('/3/tv/{series_id}/images', [
            '{series_id}' => $seriesId,
        ]);
        $query = [
            'include_image_language' => $includeImageLanguage,
            'language' => $language,
        ];

        $cacheKey = md5($url.'?'.http_build_query($query));
        return $this->redis->get($cacheKey, function ($item) use ($url, $query) {
            $item->expiresAfter(10800);
            $response = $this->tmdbHttpClient->request('GET', $url, ['query' => $query]);
            return $this->denormalizer->denormalize($response->toArray(), TvSeriesImages::class);
        });
    }

    /**
     * /3/tv/{series_id}/season/{season_number}/images - Get the images that belong to a TV season.
     * @param ?string $includeImageLanguage specify a comma separated list of ISO-639-1 values to query, for example: `en,null`
     */
    public function tvSeasonImages(int $seasonNumber, int $seriesId, ?string $language = null, ?string $includeImageLanguage = null): TvSeasonImages
    {
        $url = strtr('/3/tv/{series_id}/season/{season_number}/images', [
            '{series_id}' => $seriesId,
            '{season_number}' => $seasonNumber,
        ]);
        $query = [
            'include_image_language' => $includeImageLanguage,
            'language' => $language,
        ];

        $cacheKey = md5($url.'?'.http_build_query($query));
        return $this->redis->get($cacheKey, function ($item) use ($url, $query) {
            $item->expiresAfter(10800);
            $response = $this->tmdbHttpClient->request('GET', $url, ['query' => $query]);
            return $this->denormalizer->denormalize($response->toArray(), TvSeasonImages::class);
        });
    }

    /**
     * /3/tv/{series_id}/season/{season_number}/episode/{episode_number}/images - Get the images that belong to a TV episode.
     * @param ?string $includeImageLanguage specify a comma separated list of ISO-639-1 values to query, for example: `en,null`
     */
    public function tvEpisodeImages(int $episodeNumber, int $seasonNumber, int $seriesId, ?string $language = null, ?string $includeImageLanguage = null): TvEpisodeImages
    {
        $url = strtr('/3/tv/{series_id}/season/{season_number}/episode/{episode_number}/images', [
            '{series_id}' => $seriesId,
            '{season_number}' => $seasonNumber,
            '{episode_number}' => $episodeNumber,
        ]);
        $query = [
            'include_image_language' => $includeImageLanguage,
            'language' => $language,
        ];

        $cacheKey = md5($url.'?'.http_build_query($query));
        return $this->redis->get($cacheKey, function ($item) use ($url, $query) {
            $item->expiresAfter(10800);
            $response = $this->tmdbHttpClient->request('GET', $url, ['query' => $query]);
            return $this->denormalizer->denormalize($response->toArray(), TvEpisodeImages::class);
        });
    }

    /**
     * /3/tv/{series_id}/account_states - Get the rating, watchlist and favourite status.
     */
    public function tvSeriesAccountStates(int $seriesId, ?string $guestSessionId = null, ?string $sessionId = null): TvSeriesAccountStates
    {
        $url = strtr('/3/tv/{series_id}/account_states', [
            '{series_id}' => $seriesId,
        ]);
        $query = [
            'session_id' => $sessionId,
            'guest_session_id' => $guestSessionId,
        ];

        $cacheKey = md5($url.'?'.http_build_query($query));
        return $this->redis->get($cacheKey, function ($item) use ($url, $query) {
            $item->expiresAfter(10800);
            $response = $this->tmdbHttpClient->request('GET', $url, ['query' => $query]);
            return $this->denormalizer->denormalize($response->toArray(), TvSeriesAccountStates::class);
        });
    }

    /**
     * /3/tv/{series_id}/season/{season_number}/episode/{episode_number}/account_states - Get the rating, watchlist and favourite status.
     */
    public function tvEpisodeAccountStates(int $episodeNumber, int $seasonNumber, int $seriesId, ?string $guestSessionId = null, ?string $sessionId = null): TvEpisodeAccountStates
    {
        $url = strtr('/3/tv/{series_id}/season/{season_number}/episode/{episode_number}/account_states', [
            '{series_id}' => $seriesId,
            '{season_number}' => $seasonNumber,
            '{episode_number}' => $episodeNumber,
        ]);
        $query = [
            'session_id' => $sessionId,
            'guest_session_id' => $guestSessionId,
        ];

        $cacheKey = md5($url.'?'.http_build_query($query));
        return $this->redis->get($cacheKey, function ($item) use ($url, $query) {
            $item->expiresAfter(10800);
            $response = $this->tmdbHttpClient->request('GET', $url, ['query' => $query]);
            return $this->denormalizer->denormalize($response->toArray(), TvEpisodeAccountStates::class);
        });
    }

    /**
     * /3/tv/{series_id}/changes - Get the recent changes for a TV show.
     */
    public function tvSeriesChanges(int $seriesId, ?string $startDate = null, ?int $page = 1, ?string $endDate = null): TvSeriesChanges
    {
        $url = strtr('/3/tv/{series_id}/changes', [
            '{series_id}' => $seriesId,
        ]);
        $query = [
            'end_date' => $endDate,
            'page' => $page,
            'start_date' => $startDate,
        ];

        $cacheKey = md5($url.'?'.http_build_query($query));
        return $this->redis->get($cacheKey, function ($item) use ($url, $query) {
            $item->expiresAfter(10800);
            $response = $this->tmdbHttpClient->request('GET', $url, ['query' => $query]);
            return $this->denormalizer->denormalize($response->toArray(), TvSeriesChanges::class);
        });
    }

    /**
     * /3/tv/airing_today - Get a list of TV shows airing today.
     */
    public function tvSeriesAiringTodayList(?int $page = 1, ?string $timezone = null, ?string $language = 'en-US'): TvSeriesAiringTodayList
    {
        $url = strtr('/3/tv/airing_today', [
        ]);
        $query = [
            'language' => $language,
            'page' => $page,
            'timezone' => $timezone,
        ];

        $cacheKey = md5($url.'?'.http_build_query($query));
        return $this->redis->get($cacheKey, function ($item) use ($url, $query) {
            $item->expiresAfter(10800);
            $response = $this->tmdbHttpClient->request('GET', $url, ['query' => $query]);
            return $this->denormalizer->denormalize($response->toArray(), TvSeriesAiringTodayList::class);
        });
    }

    /**
     * /3/tv/on_the_air - Get a list of TV shows that air in the next 7 days.
     */
    public function tvSeriesOnTheAirList(?int $page = 1, ?string $timezone = null, ?string $language = 'en-US'): TvSeriesOnTheAirList
    {
        $url = strtr('/3/tv/on_the_air', [
        ]);
        $query = [
            'language' => $language,
            'page' => $page,
            'timezone' => $timezone,
        ];

        $cacheKey = md5($url.'?'.http_build_query($query));
        return $this->redis->get($cacheKey, function ($item) use ($url, $query) {
            $item->expiresAfter(10800);
            $response = $this->tmdbHttpClient->request('GET', $url, ['query' => $query]);
            return $this->denormalizer->denormalize($response->toArray(), TvSeriesOnTheAirList::class);
        });
    }

    /**
     * /3/tv/popular - Get a list of TV shows ordered by popularity.
     */
    public function tvSeriesPopularList(?int $page = 1, ?string $language = 'en-US'): TvSeriesPopularList
    {
        $url = strtr('/3/tv/popular', [
        ]);
        $query = [
            'language' => $language,
            'page' => $page,
        ];

        $cacheKey = md5($url.'?'.http_build_query($query));
        return $this->redis->get($cacheKey, function ($item) use ($url, $query) {
            $item->expiresAfter(10800);
            $response = $this->tmdbHttpClient->request('GET', $url, ['query' => $query]);
            return $this->denormalizer->denormalize($response->toArray(), TvSeriesPopularList::class);
        });
    }

    /**
     * /3/tv/top_rated - Get a list of TV shows ordered by rating.
     */
    public function tvSeriesTopRatedList(?int $page = 1, ?string $language = 'en-US'): TvSeriesTopRatedList
    {
        $url = strtr('/3/tv/top_rated', [
        ]);
        $query = [
            'language' => $language,
            'page' => $page,
        ];

        $cacheKey = md5($url.'?'.http_build_query($query));
        return $this->redis->get($cacheKey, function ($item) use ($url, $query) {
            $item->expiresAfter(10800);
            $response = $this->tmdbHttpClient->request('GET', $url, ['query' => $query]);
            return $this->denormalizer->denormalize($response->toArray(), TvSeriesTopRatedList::class);
        });
    }

    /**
     * /3/tv/latest - Get the newest TV show ID.
     */
    public function tvSeriesLatestId(): TvSeriesLatestId
    {
        $url = strtr('/3/tv/latest', [
        ]);
        $query = [
        ];

        $cacheKey = md5($url.'?'.http_build_query($query));
        return $this->redis->get($cacheKey, function ($item) use ($url, $query) {
            $item->expiresAfter(10800);
            $response = $this->tmdbHttpClient->request('GET', $url, ['query' => $query]);
            return $this->denormalizer->denormalize($response->toArray(), TvSeriesLatestId::class);
        });
    }

    /**
     * /3/tv/{series_id}/aggregate_credits - Get the aggregate credits (cast and crew) that have been added to a TV show.
     */
    public function tvSeriesAggregateCredits(int $seriesId, ?string $language = 'en-US'): TvSeriesAggregateCredits
    {
        $url = strtr('/3/tv/{series_id}/aggregate_credits', [
            '{series_id}' => $seriesId,
        ]);
        $query = [
            'language' => $language,
        ];

        $cacheKey = md5($url.'?'.http_build_query($query));
        return $this->redis->get($cacheKey, function ($item) use ($url, $query) {
            $item->expiresAfter(10800);
            $response = $this->tmdbHttpClient->request('GET', $url, ['query' => $query]);
            return $this->denormalizer->denormalize($response->toArray(), TvSeriesAggregateCredits::class);
        });
    }

    /**
     * /3/tv/{series_id}/alternative_titles - Get the alternative titles that have been added to a TV show.
     */
    public function tvSeriesAlternativeTitles(int $seriesId): TvSeriesAlternativeTitles
    {
        $url = strtr('/3/tv/{series_id}/alternative_titles', [
            '{series_id}' => $seriesId,
        ]);
        $query = [
        ];

        $cacheKey = md5($url.'?'.http_build_query($query));
        return $this->redis->get($cacheKey, function ($item) use ($url, $query) {
            $item->expiresAfter(10800);
            $response = $this->tmdbHttpClient->request('GET', $url, ['query' => $query]);
            return $this->denormalizer->denormalize($response->toArray(), TvSeriesAlternativeTitles::class);
        });
    }

    /**
     * /3/tv/{series_id}/content_ratings - Get the content ratings that have been added to a TV show.
     */
    public function tvSeriesContentRatings(int $seriesId): TvSeriesContentRatings
    {
        $url = strtr('/3/tv/{series_id}/content_ratings', [
            '{series_id}' => $seriesId,
        ]);
        $query = [
        ];

        $cacheKey = md5($url.'?'.http_build_query($query));
        return $this->redis->get($cacheKey, function ($item) use ($url, $query) {
            $item->expiresAfter(10800);
            $response = $this->tmdbHttpClient->request('GET', $url, ['query' => $query]);
            return $this->denormalizer->denormalize($response->toArray(), TvSeriesContentRatings::class);
        });
    }

    /**
     * /3/tv/{series_id}/credits - Get the latest season credits of a TV show.
     */
    public function tvSeriesCredits(int $seriesId, ?string $language = 'en-US'): TvSeriesCredits
    {
        $url = strtr('/3/tv/{series_id}/credits', [
            '{series_id}' => $seriesId,
        ]);
        $query = [
            'language' => $language,
        ];

        $cacheKey = md5($url.'?'.http_build_query($query));
        return $this->redis->get($cacheKey, function ($item) use ($url, $query) {
            $item->expiresAfter(10800);
            $response = $this->tmdbHttpClient->request('GET', $url, ['query' => $query]);
            return $this->denormalizer->denormalize($response->toArray(), TvSeriesCredits::class);
        });
    }

    /**
     * /3/tv/{series_id}/episode_groups - Get the episode groups that have been added to a TV show.
     */
    public function tvSeriesEpisodeGroups(int $seriesId): TvSeriesEpisodeGroups
    {
        $url = strtr('/3/tv/{series_id}/episode_groups', [
            '{series_id}' => $seriesId,
        ]);
        $query = [
        ];

        $cacheKey = md5($url.'?'.http_build_query($query));
        return $this->redis->get($cacheKey, function ($item) use ($url, $query) {
            $item->expiresAfter(10800);
            $response = $this->tmdbHttpClient->request('GET', $url, ['query' => $query]);
            return $this->denormalizer->denormalize($response->toArray(), TvSeriesEpisodeGroups::class);
        });
    }

    /**
     * /3/tv/{series_id}/external_ids - Get a list of external IDs that have been added to a TV show.
     */
    public function tvSeriesExternalIds(int $seriesId): TvSeriesExternalIds
    {
        $url = strtr('/3/tv/{series_id}/external_ids', [
            '{series_id}' => $seriesId,
        ]);
        $query = [
        ];

        $cacheKey = md5($url.'?'.http_build_query($query));
        return $this->redis->get($cacheKey, function ($item) use ($url, $query) {
            $item->expiresAfter(10800);
            $response = $this->tmdbHttpClient->request('GET', $url, ['query' => $query]);
            return $this->denormalizer->denormalize($response->toArray(), TvSeriesExternalIds::class);
        });
    }

    /**
     * /3/tv/{series_id}/keywords - Get a list of keywords that have been added to a TV show.
     */
    public function tvSeriesKeywords(int $seriesId): TvSeriesKeywords
    {
        $url = strtr('/3/tv/{series_id}/keywords', [
            '{series_id}' => $seriesId,
        ]);
        $query = [
        ];

        $cacheKey = md5($url.'?'.http_build_query($query));
        return $this->redis->get($cacheKey, function ($item) use ($url, $query) {
            $item->expiresAfter(10800);
            $response = $this->tmdbHttpClient->request('GET', $url, ['query' => $query]);
            return $this->denormalizer->denormalize($response->toArray(), TvSeriesKeywords::class);
        });
    }

    /**
     * /3/tv/{series_id}/recommendations
     */
    public function tvSeriesRecommendations(int $seriesId, ?int $page = 1, ?string $language = 'en-US'): TvSeriesRecommendations
    {
        $url = strtr('/3/tv/{series_id}/recommendations', [
            '{series_id}' => $seriesId,
        ]);
        $query = [
            'language' => $language,
            'page' => $page,
        ];

        $cacheKey = md5($url.'?'.http_build_query($query));
        return $this->redis->get($cacheKey, function ($item) use ($url, $query) {
            $item->expiresAfter(10800);
            $response = $this->tmdbHttpClient->request('GET', $url, ['query' => $query]);
            return $this->denormalizer->denormalize($response->toArray(), TvSeriesRecommendations::class);
        });
    }

    /**
     * /3/tv/{series_id}/reviews - Get the reviews that have been added to a TV show.
     */
    public function tvSeriesReviews(int $seriesId, ?int $page = 1, ?string $language = 'en-US'): TvSeriesReviews
    {
        $url = strtr('/3/tv/{series_id}/reviews', [
            '{series_id}' => $seriesId,
        ]);
        $query = [
            'language' => $language,
            'page' => $page,
        ];

        $cacheKey = md5($url.'?'.http_build_query($query));
        return $this->redis->get($cacheKey, function ($item) use ($url, $query) {
            $item->expiresAfter(10800);
            $response = $this->tmdbHttpClient->request('GET', $url, ['query' => $query]);
            return $this->denormalizer->denormalize($response->toArray(), TvSeriesReviews::class);
        });
    }

    /**
     * /3/tv/{series_id}/screened_theatrically - Get the seasons and episodes that have screened theatrically.
     */
    public function tvSeriesScreenedTheatrically(int $seriesId): TvSeriesScreenedTheatrically
    {
        $url = strtr('/3/tv/{series_id}/screened_theatrically', [
            '{series_id}' => $seriesId,
        ]);
        $query = [
        ];

        $cacheKey = md5($url.'?'.http_build_query($query));
        return $this->redis->get($cacheKey, function ($item) use ($url, $query) {
            $item->expiresAfter(10800);
            $response = $this->tmdbHttpClient->request('GET', $url, ['query' => $query]);
            return $this->denormalizer->denormalize($response->toArray(), TvSeriesScreenedTheatrically::class);
        });
    }

    /**
     * /3/tv/{series_id}/similar - Get the similar TV shows.
     */
    public function tvSeriesSimilar(string $seriesId, ?int $page = 1, ?string $language = 'en-US'): TvSeriesSimilar
    {
        $url = strtr('/3/tv/{series_id}/similar', [
            '{series_id}' => $seriesId,
        ]);
        $query = [
            'language' => $language,
            'page' => $page,
        ];

        $cacheKey = md5($url.'?'.http_build_query($query));
        return $this->redis->get($cacheKey, function ($item) use ($url, $query) {
            $item->expiresAfter(10800);
            $response = $this->tmdbHttpClient->request('GET', $url, ['query' => $query]);
            return $this->denormalizer->denormalize($response->toArray(), TvSeriesSimilar::class);
        });
    }

    /**
     * /3/tv/{series_id}/translations - Get the translations that have been added to a TV show.
     */
    public function tvSeriesTranslations(int $seriesId): TvSeriesTranslations
    {
        $url = strtr('/3/tv/{series_id}/translations', [
            '{series_id}' => $seriesId,
        ]);
        $query = [
        ];

        $cacheKey = md5($url.'?'.http_build_query($query));
        return $this->redis->get($cacheKey, function ($item) use ($url, $query) {
            $item->expiresAfter(10800);
            $response = $this->tmdbHttpClient->request('GET', $url, ['query' => $query]);
            return $this->denormalizer->denormalize($response->toArray(), TvSeriesTranslations::class);
        });
    }

    /**
     * /3/tv/{series_id}/videos - Get the videos that belong to a TV show.
     * @param ?string $includeVideoLanguage filter the list results by language, supports more than one value by using a comma
     */
    public function tvSeriesVideos(int $seriesId, ?string $language = 'en-US', ?string $includeVideoLanguage = null): TvSeriesVideos
    {
        $url = strtr('/3/tv/{series_id}/videos', [
            '{series_id}' => $seriesId,
        ]);
        $query = [
            'include_video_language' => $includeVideoLanguage,
            'language' => $language,
        ];

        $cacheKey = md5($url.'?'.http_build_query($query));
        return $this->redis->get($cacheKey, function ($item) use ($url, $query) {
            $item->expiresAfter(10800);
            $response = $this->tmdbHttpClient->request('GET', $url, ['query' => $query]);
            return $this->denormalizer->denormalize($response->toArray(), TvSeriesVideos::class);
        });
    }

    /**
     * /3/tv/{series_id}/watch/providers - Get the list of streaming providers we have for a TV show.
     */
    public function tvSeriesWatchProviders(int $seriesId): TvSeriesWatchProviders
    {
        $url = strtr('/3/tv/{series_id}/watch/providers', [
            '{series_id}' => $seriesId,
        ]);
        $query = [
        ];

        $cacheKey = md5($url.'?'.http_build_query($query));
        return $this->redis->get($cacheKey, function ($item) use ($url, $query) {
            $item->expiresAfter(10800);
            $response = $this->tmdbHttpClient->request('GET', $url, ['query' => $query]);
            return $this->denormalizer->denormalize($response->toArray(), TvSeriesWatchProviders::class);
        });
    }

    /**
     * /3/tv/{series_id}/season/{season_number}/account_states - Get the rating, watchlist and favourite status.
     */
    public function tvSeasonAccountStates(int $seasonNumber, int $seriesId, ?string $guestSessionId = null, ?string $sessionId = null): TvSeasonAccountStates
    {
        $url = strtr('/3/tv/{series_id}/season/{season_number}/account_states', [
            '{series_id}' => $seriesId,
            '{season_number}' => $seasonNumber,
        ]);
        $query = [
            'session_id' => $sessionId,
            'guest_session_id' => $guestSessionId,
        ];

        $cacheKey = md5($url.'?'.http_build_query($query));
        return $this->redis->get($cacheKey, function ($item) use ($url, $query) {
            $item->expiresAfter(10800);
            $response = $this->tmdbHttpClient->request('GET', $url, ['query' => $query]);
            return $this->denormalizer->denormalize($response->toArray(), TvSeasonAccountStates::class);
        });
    }

    /**
     * /3/tv/{series_id}/season/{season_number}/aggregate_credits - Get the aggregate credits (cast and crew) that have been added to a TV season.
     */
    public function tvSeasonAggregateCredits(int $seasonNumber, int $seriesId, ?string $language = 'en-US'): TvSeasonAggregateCredits
    {
        $url = strtr('/3/tv/{series_id}/season/{season_number}/aggregate_credits', [
            '{series_id}' => $seriesId,
            '{season_number}' => $seasonNumber,
        ]);
        $query = [
            'language' => $language,
        ];

        $cacheKey = md5($url.'?'.http_build_query($query));
        return $this->redis->get($cacheKey, function ($item) use ($url, $query) {
            $item->expiresAfter(10800);
            $response = $this->tmdbHttpClient->request('GET', $url, ['query' => $query]);
            return $this->denormalizer->denormalize($response->toArray(), TvSeasonAggregateCredits::class);
        });
    }

    /**
     * /3/tv/season/{season_id}/changes - Get the recent changes for a TV season.
     */
    public function tvSeasonChangesById(int $seasonId, ?int $page = 1, ?string $startDate = null, ?string $endDate = null): TvSeasonChangesById
    {
        $url = strtr('/3/tv/season/{season_id}/changes', [
            '{season_id}' => $seasonId,
        ]);
        $query = [
            'end_date' => $endDate,
            'page' => $page,
            'start_date' => $startDate,
        ];

        $cacheKey = md5($url.'?'.http_build_query($query));
        return $this->redis->get($cacheKey, function ($item) use ($url, $query) {
            $item->expiresAfter(10800);
            $response = $this->tmdbHttpClient->request('GET', $url, ['query' => $query]);
            return $this->denormalizer->denormalize($response->toArray(), TvSeasonChangesById::class);
        });
    }

    /**
     * /3/tv/{series_id}/season/{season_number}/credits
     */
    public function tvSeasonCredits(int $seasonNumber, int $seriesId, ?string $language = 'en-US'): TvSeasonCredits
    {
        $url = strtr('/3/tv/{series_id}/season/{season_number}/credits', [
            '{series_id}' => $seriesId,
            '{season_number}' => $seasonNumber,
        ]);
        $query = [
            'language' => $language,
        ];

        $cacheKey = md5($url.'?'.http_build_query($query));
        return $this->redis->get($cacheKey, function ($item) use ($url, $query) {
            $item->expiresAfter(10800);
            $response = $this->tmdbHttpClient->request('GET', $url, ['query' => $query]);
            return $this->denormalizer->denormalize($response->toArray(), TvSeasonCredits::class);
        });
    }

    /**
     * /3/tv/{series_id}/season/{season_number}/external_ids - Get a list of external IDs that have been added to a TV season.
     */
    public function tvSeasonExternalIds(int $seasonNumber, int $seriesId): TvSeasonExternalIds
    {
        $url = strtr('/3/tv/{series_id}/season/{season_number}/external_ids', [
            '{series_id}' => $seriesId,
            '{season_number}' => $seasonNumber,
        ]);
        $query = [
        ];

        $cacheKey = md5($url.'?'.http_build_query($query));
        return $this->redis->get($cacheKey, function ($item) use ($url, $query) {
            $item->expiresAfter(10800);
            $response = $this->tmdbHttpClient->request('GET', $url, ['query' => $query]);
            return $this->denormalizer->denormalize($response->toArray(), TvSeasonExternalIds::class);
        });
    }

    /**
     * /3/tv/{series_id}/season/{season_number}/translations - Get the translations for a TV season.
     */
    public function tvSeasonTranslations(int $seasonNumber, int $seriesId): TvSeasonTranslations
    {
        $url = strtr('/3/tv/{series_id}/season/{season_number}/translations', [
            '{series_id}' => $seriesId,
            '{season_number}' => $seasonNumber,
        ]);
        $query = [
        ];

        $cacheKey = md5($url.'?'.http_build_query($query));
        return $this->redis->get($cacheKey, function ($item) use ($url, $query) {
            $item->expiresAfter(10800);
            $response = $this->tmdbHttpClient->request('GET', $url, ['query' => $query]);
            return $this->denormalizer->denormalize($response->toArray(), TvSeasonTranslations::class);
        });
    }

    /**
     * /3/tv/{series_id}/season/{season_number}/videos - Get the videos that belong to a TV season.
     * @param ?string $includeVideoLanguage filter the list results by language, supports more than one value by using a comma
     */
    public function tvSeasonVideos(int $seasonNumber, int $seriesId, ?string $language = 'en-US', ?string $includeVideoLanguage = null): TvSeasonVideos
    {
        $url = strtr('/3/tv/{series_id}/season/{season_number}/videos', [
            '{series_id}' => $seriesId,
            '{season_number}' => $seasonNumber,
        ]);
        $query = [
            'include_video_language' => $includeVideoLanguage,
            'language' => $language,
        ];

        $cacheKey = md5($url.'?'.http_build_query($query));
        return $this->redis->get($cacheKey, function ($item) use ($url, $query) {
            $item->expiresAfter(10800);
            $response = $this->tmdbHttpClient->request('GET', $url, ['query' => $query]);
            return $this->denormalizer->denormalize($response->toArray(), TvSeasonVideos::class);
        });
    }

    /**
     * /3/tv/{series_id}/season/{season_number}/episode/{episode_number}/credits
     */
    public function tvEpisodeCredits(int $episodeNumber, int $seasonNumber, int $seriesId, ?string $language = 'en-US'): TvEpisodeCredits
    {
        $url = strtr('/3/tv/{series_id}/season/{season_number}/episode/{episode_number}/credits', [
            '{series_id}' => $seriesId,
            '{season_number}' => $seasonNumber,
            '{episode_number}' => $episodeNumber,
        ]);
        $query = [
            'language' => $language,
        ];

        $cacheKey = md5($url.'?'.http_build_query($query));
        return $this->redis->get($cacheKey, function ($item) use ($url, $query) {
            $item->expiresAfter(10800);
            $response = $this->tmdbHttpClient->request('GET', $url, ['query' => $query]);
            return $this->denormalizer->denormalize($response->toArray(), TvEpisodeCredits::class);
        });
    }

    /**
     * /3/tv/{series_id}/season/{season_number}/episode/{episode_number}/external_ids - Get a list of external IDs that have been added to a TV episode.
     */
    public function tvEpisodeExternalIds(int $seasonNumber, string $episodeNumber, int $seriesId): TvEpisodeExternalIds
    {
        $url = strtr('/3/tv/{series_id}/season/{season_number}/episode/{episode_number}/external_ids', [
            '{series_id}' => $seriesId,
            '{season_number}' => $seasonNumber,
            '{episode_number}' => $episodeNumber,
        ]);
        $query = [
        ];

        $cacheKey = md5($url.'?'.http_build_query($query));
        return $this->redis->get($cacheKey, function ($item) use ($url, $query) {
            $item->expiresAfter(10800);
            $response = $this->tmdbHttpClient->request('GET', $url, ['query' => $query]);
            return $this->denormalizer->denormalize($response->toArray(), TvEpisodeExternalIds::class);
        });
    }

    /**
     * /3/tv/{series_id}/season/{season_number}/episode/{episode_number}/translations - Get the translations that have been added to a TV episode.
     */
    public function tvEpisodeTranslations(int $seasonNumber, int $episodeNumber, int $seriesId): TvEpisodeTranslations
    {
        $url = strtr('/3/tv/{series_id}/season/{season_number}/episode/{episode_number}/translations', [
            '{series_id}' => $seriesId,
            '{season_number}' => $seasonNumber,
            '{episode_number}' => $episodeNumber,
        ]);
        $query = [
        ];

        $cacheKey = md5($url.'?'.http_build_query($query));
        return $this->redis->get($cacheKey, function ($item) use ($url, $query) {
            $item->expiresAfter(10800);
            $response = $this->tmdbHttpClient->request('GET', $url, ['query' => $query]);
            return $this->denormalizer->denormalize($response->toArray(), TvEpisodeTranslations::class);
        });
    }

    /**
     * /3/tv/{series_id}/season/{season_number}/episode/{episode_number}/videos - Get the videos that belong to a TV episode.
     * @param ?string $includeVideoLanguage filter the list results by language, supports more than one value by using a comma
     */
    public function tvEpisodeVideos(int $episodeNumber, int $seasonNumber, int $seriesId, ?string $language = 'en-US', ?string $includeVideoLanguage = null): TvEpisodeVideos
    {
        $url = strtr('/3/tv/{series_id}/season/{season_number}/episode/{episode_number}/videos', [
            '{series_id}' => $seriesId,
            '{season_number}' => $seasonNumber,
            '{episode_number}' => $episodeNumber,
        ]);
        $query = [
            'include_video_language' => $includeVideoLanguage,
            'language' => $language,
        ];

        $cacheKey = md5($url.'?'.http_build_query($query));
        return $this->redis->get($cacheKey, function ($item) use ($url, $query) {
            $item->expiresAfter(10800);
            $response = $this->tmdbHttpClient->request('GET', $url, ['query' => $query]);
            return $this->denormalizer->denormalize($response->toArray(), TvEpisodeVideos::class);
        });
    }

    /**
     * /3/tv/changes
     */
    public function changesTvList(?int $page = 1, ?string $startDate = null, ?string $endDate = null): ChangesTvList
    {
        $url = strtr('/3/tv/changes', [
        ]);
        $query = [
            'end_date' => $endDate,
            'page' => $page,
            'start_date' => $startDate,
        ];

        $cacheKey = md5($url.'?'.http_build_query($query));
        return $this->redis->get($cacheKey, function ($item) use ($url, $query) {
            $item->expiresAfter(10800);
            $response = $this->tmdbHttpClient->request('GET', $url, ['query' => $query]);
            return $this->denormalizer->denormalize($response->toArray(), ChangesTvList::class);
        });
    }

    /**
     * /3/tv/{series_id}/season/{season_number}/watch/providers - Get the list of streaming providers we have for a TV season.
     */
    public function tvSeasonWatchProviders(int $seasonNumber, int $seriesId, ?string $language = 'en-US'): TvSeasonWatchProviders
    {
        $url = strtr('/3/tv/{series_id}/season/{season_number}/watch/providers', [
            '{series_id}' => $seriesId,
            '{season_number}' => $seasonNumber,
        ]);
        $query = [
            'language' => $language,
        ];

        $cacheKey = md5($url.'?'.http_build_query($query));
        return $this->redis->get($cacheKey, function ($item) use ($url, $query) {
            $item->expiresAfter(10800);
            $response = $this->tmdbHttpClient->request('GET', $url, ['query' => $query]);
            return $this->denormalizer->denormalize($response->toArray(), TvSeasonWatchProviders::class);
        });
    }

    /**
     * /3/tv/episode/{episode_id}/changes - Get the recent changes for a TV episode.
     */
    public function tvEpisodeChangesById(int $episodeId): TvEpisodeChangesById
    {
        $url = strtr('/3/tv/episode/{episode_id}/changes', [
            '{episode_id}' => $episodeId,
        ]);
        $query = [
        ];

        $cacheKey = md5($url.'?'.http_build_query($query));
        return $this->redis->get($cacheKey, function ($item) use ($url, $query) {
            $item->expiresAfter(10800);
            $response = $this->tmdbHttpClient->request('GET', $url, ['query' => $query]);
            return $this->denormalizer->denormalize($response->toArray(), TvEpisodeChangesById::class);
        });
    }

    /**
     * /3/tv/episode_group/{tv_episode_group_id} - Get the details of a TV episode group.
     */
    public function tvEpisodeGroupDetails(string $tvEpisodeGroupId): TvEpisodeGroupDetails
    {
        $url = strtr('/3/tv/episode_group/{tv_episode_group_id}', [
            '{tv_episode_group_id}' => $tvEpisodeGroupId,
        ]);
        $query = [
        ];

        $cacheKey = md5($url.'?'.http_build_query($query));
        return $this->redis->get($cacheKey, function ($item) use ($url, $query) {
            $item->expiresAfter(10800);
            $response = $this->tmdbHttpClient->request('GET', $url, ['query' => $query]);
            return $this->denormalizer->denormalize($response->toArray(), TvEpisodeGroupDetails::class);
        });
    }

    /**
     * /3/tv/{series_id}/lists - Get the lists that a TV series has been added to.
     */
    public function listsCopy(int $seriesId, ?int $page = 1, ?string $language = 'en-US'): ListsCopy
    {
        $url = strtr('/3/tv/{series_id}/lists', [
            '{series_id}' => $seriesId,
        ]);
        $query = [
            'language' => $language,
            'page' => $page,
        ];

        $cacheKey = md5($url.'?'.http_build_query($query));
        return $this->redis->get($cacheKey, function ($item) use ($url, $query) {
            $item->expiresAfter(10800);
            $response = $this->tmdbHttpClient->request('GET', $url, ['query' => $query]);
            return $this->denormalizer->denormalize($response->toArray(), ListsCopy::class);
        });
    }
}