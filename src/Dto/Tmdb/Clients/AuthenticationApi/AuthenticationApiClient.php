<?php

namespace App\Dto\Tmdb\Clients\AuthenticationApi;

use Symfony\Contracts\HttpClient\HttpClientInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Contracts\Cache\CacheInterface;
use App\Dto\Tmdb\Responses\Authentication\AuthenticationCreateGuestSession;
use App\Dto\Tmdb\Responses\Authentication\AuthenticationCreateRequestToken;
use App\Dto\Tmdb\Responses\Authentication\AuthenticationValidateKey;

/**
 * This class was auto generated by the TMDB DTO Generator.
 * Do not edit this file manually!
 */
readonly class AuthenticationApiClient implements AuthenticationApiInterface
{
    public function __construct(
        private HttpClientInterface $tmdbHttpClient,
        private DenormalizerInterface $denormalizer,
        private CacheInterface $redis,
    )
    {
    }

    /**
     * /3/authentication/guest_session/new
     */
    public function authenticationCreateGuestSession(): AuthenticationCreateGuestSession
    {
        $url = strtr('/3/authentication/guest_session/new', [
        ]);
        $query = [
        ];

        $cacheKey = md5($url.'?'.http_build_query($query));
        return $this->redis->get($cacheKey, function ($item) use ($url, $query) {
            $item->expiresAfter(10800);
            $response = $this->tmdbHttpClient->request('GET', $url, ['query' => $query]);
            return $this->denormalizer->denormalize($response->toArray(), AuthenticationCreateGuestSession::class);
        });
    }

    /**
     * /3/authentication/token/new
     */
    public function authenticationCreateRequestToken(): AuthenticationCreateRequestToken
    {
        $url = strtr('/3/authentication/token/new', [
        ]);
        $query = [
        ];

        $cacheKey = md5($url.'?'.http_build_query($query));
        return $this->redis->get($cacheKey, function ($item) use ($url, $query) {
            $item->expiresAfter(10800);
            $response = $this->tmdbHttpClient->request('GET', $url, ['query' => $query]);
            return $this->denormalizer->denormalize($response->toArray(), AuthenticationCreateRequestToken::class);
        });
    }

    /**
     * /3/authentication - Test your API Key to see if it's valid.
     */
    public function authenticationValidateKey(): AuthenticationValidateKey
    {
        $url = strtr('/3/authentication', [
        ]);
        $query = [
        ];

        $cacheKey = md5($url.'?'.http_build_query($query));
        return $this->redis->get($cacheKey, function ($item) use ($url, $query) {
            $item->expiresAfter(10800);
            $response = $this->tmdbHttpClient->request('GET', $url, ['query' => $query]);
            return $this->denormalizer->denormalize($response->toArray(), AuthenticationValidateKey::class);
        });
    }
}