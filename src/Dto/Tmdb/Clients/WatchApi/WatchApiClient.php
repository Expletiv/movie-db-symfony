<?php

namespace App\Dto\Tmdb\Clients\WatchApi;

use Symfony\Contracts\HttpClient\HttpClientInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Contracts\Cache\CacheInterface;
use App\Dto\Tmdb\Responses\Watch\WatchProvidersAvailableRegions;
use App\Dto\Tmdb\Responses\Watch\WatchProvidersMovieList;
use App\Dto\Tmdb\Responses\Watch\WatchProviderTvList;

/**
 * This class was auto generated by the TMDB DTO Generator.
 * Do not edit this file manually!
 */
readonly class WatchApiClient implements WatchApiInterface
{
    public function __construct(
        private HttpClientInterface $tmdbHttpClient,
        private DenormalizerInterface $denormalizer,
        private CacheInterface $redis,
    )
    {
    }

    /**
     * /3/watch/providers/regions - Get the list of the countries we have watch provider (OTT/streaming) data for.
     */
    public function watchProvidersAvailableRegions(?string $language = 'en-US'): WatchProvidersAvailableRegions
    {
        $url = strtr('/3/watch/providers/regions', [
        ]);
        $query = [
            'language' => $language,
        ];

        $cacheKey = md5($url.'?'.http_build_query($query));
        return $this->redis->get($cacheKey, function ($item) use ($url, $query) {
            $item->expiresAfter(10800);
            $response = $this->tmdbHttpClient->request('GET', $url, ['query' => $query]);
            return $this->denormalizer->denormalize($response->toArray(), WatchProvidersAvailableRegions::class);
        });
    }

    /**
     * /3/watch/providers/movie - Get the list of streaming providers we have for movies.
     */
    public function watchProvidersMovieList(?string $watchRegion = null, ?string $language = 'en-US'): WatchProvidersMovieList
    {
        $url = strtr('/3/watch/providers/movie', [
        ]);
        $query = [
            'language' => $language,
            'watch_region' => $watchRegion,
        ];

        $cacheKey = md5($url.'?'.http_build_query($query));
        return $this->redis->get($cacheKey, function ($item) use ($url, $query) {
            $item->expiresAfter(10800);
            $response = $this->tmdbHttpClient->request('GET', $url, ['query' => $query]);
            return $this->denormalizer->denormalize($response->toArray(), WatchProvidersMovieList::class);
        });
    }

    /**
     * /3/watch/providers/tv - Get the list of streaming providers we have for TV shows.
     */
    public function watchProviderTvList(?string $watchRegion = null, ?string $language = 'en-US'): WatchProviderTvList
    {
        $url = strtr('/3/watch/providers/tv', [
        ]);
        $query = [
            'language' => $language,
            'watch_region' => $watchRegion,
        ];

        $cacheKey = md5($url.'?'.http_build_query($query));
        return $this->redis->get($cacheKey, function ($item) use ($url, $query) {
            $item->expiresAfter(10800);
            $response = $this->tmdbHttpClient->request('GET', $url, ['query' => $query]);
            return $this->denormalizer->denormalize($response->toArray(), WatchProviderTvList::class);
        });
    }
}