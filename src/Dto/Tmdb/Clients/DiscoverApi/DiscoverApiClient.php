<?php

namespace App\Dto\Tmdb\Clients\DiscoverApi;

use Symfony\Contracts\HttpClient\HttpClientInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Contracts\Cache\CacheInterface;
use App\Dto\Tmdb\Responses\Discover\DiscoverMovie;
use App\Dto\Tmdb\Responses\Discover\DiscoverTv;

/**
 * This class was auto generated by the TMDB DTO Generator.
 * Do not edit this file manually!
 */
readonly class DiscoverApiClient implements DiscoverApiInterface
{
    public function __construct(
        private HttpClientInterface $tmdbHttpClient,
        private DenormalizerInterface $denormalizer,
        private CacheInterface $redis,
    )
    {
    }

    /**
     * /3/discover/movie - Find movies using over 30 filters and sort options.
     * @param ?int $withReleaseType possible values are: [1, 2, 3, 4, 5, 6] can be a comma (`AND`) or pipe (`OR`) separated query, can be used in conjunction with `region`
     * @param ?string $withCrew can be a comma (`AND`) or pipe (`OR`) separated query
     * @param ?string $withKeywords can be a comma (`AND`) or pipe (`OR`) separated query
     * @param ?string $withCast can be a comma (`AND`) or pipe (`OR`) separated query
     * @param ?string $certificationCountry use in conjunction with the `certification`, `certification.gte` and `certification.lte` filters
     * @param ?string $certificationLte use in conjunction with `region`
     * @param ?string $withWatchProviders use in conjunction with `watch_region`, can be a comma (`AND`) or pipe (`OR`) separated query
     * @param ?string $certificationGte use in conjunction with `region`
     * @param ?string $withCompanies can be a comma (`AND`) or pipe (`OR`) separated query
     * @param ?string $withGenres can be a comma (`AND`) or pipe (`OR`) separated query
     * @param ?string $withPeople can be a comma (`AND`) or pipe (`OR`) separated query
     * @param ?string $withWatchMonetizationTypes possible values are: [flatrate, free, ads, rent, buy] use in conjunction with `watch_region`, can be a comma (`AND`) or pipe (`OR`) separated query
     * @param ?string $watchRegion use in conjunction with `with_watch_monetization_types ` or `with_watch_providers `
     * @param ?string $certification use in conjunction with `region`
     */
    public function discoverMovie(?int $withRuntimeLte = null, ?string $withOriginalLanguage = null, ?int $withReleaseType = null, ?string $withCrew = null, ?string $withKeywords = null, ?string $withoutWatchProviders = null, ?string $withCast = null, ?int $page = 1, ?int $primaryReleaseYear = null, ?bool $includeVideo = false, ?string $language = 'en-US', ?bool $includeAdult = false, ?string $certificationCountry = null, ?string $certificationLte = null, ?string $withWatchProviders = null, ?string $primaryReleaseDateGte = null, ?string $withoutGenres = null, ?string $primaryReleaseDateLte = null, ?string $certificationGte = null, ?string $region = null, ?string $withCompanies = null, ?string $releaseDateGte = null, ?string $withGenres = null, ?string $releaseDateLte = null, ?string $withOriginCountry = null, ?string $sortBy = 'popularity.desc', ?string $withPeople = null, ?float $voteAverageGte = null, ?int $withRuntimeGte = null, ?float $voteAverageLte = null, ?string $withWatchMonetizationTypes = null, ?float $voteCountGte = null, ?string $withoutCompanies = null, ?float $voteCountLte = null, ?string $withoutKeywords = null, ?string $watchRegion = null, ?int $year = null, ?string $certification = null): DiscoverMovie
    {
        $url = strtr('/3/discover/movie', [
        ]);
        $query = [
            'certification' => $certification,
            'certification.gte' => $certificationGte,
            'certification.lte' => $certificationLte,
            'certification_country' => $certificationCountry,
            'include_adult' => $includeAdult,
            'include_video' => $includeVideo,
            'language' => $language,
            'page' => $page,
            'primary_release_year' => $primaryReleaseYear,
            'primary_release_date.gte' => $primaryReleaseDateGte,
            'primary_release_date.lte' => $primaryReleaseDateLte,
            'region' => $region,
            'release_date.gte' => $releaseDateGte,
            'release_date.lte' => $releaseDateLte,
            'sort_by' => $sortBy,
            'vote_average.gte' => $voteAverageGte,
            'vote_average.lte' => $voteAverageLte,
            'vote_count.gte' => $voteCountGte,
            'vote_count.lte' => $voteCountLte,
            'watch_region' => $watchRegion,
            'with_cast' => $withCast,
            'with_companies' => $withCompanies,
            'with_crew' => $withCrew,
            'with_genres' => $withGenres,
            'with_keywords' => $withKeywords,
            'with_origin_country' => $withOriginCountry,
            'with_original_language' => $withOriginalLanguage,
            'with_people' => $withPeople,
            'with_release_type' => $withReleaseType,
            'with_runtime.gte' => $withRuntimeGte,
            'with_runtime.lte' => $withRuntimeLte,
            'with_watch_monetization_types' => $withWatchMonetizationTypes,
            'with_watch_providers' => $withWatchProviders,
            'without_companies' => $withoutCompanies,
            'without_genres' => $withoutGenres,
            'without_keywords' => $withoutKeywords,
            'without_watch_providers' => $withoutWatchProviders,
            'year' => $year,
        ];

        $cacheKey = md5($url.'?'.http_build_query($query));
        return $this->redis->get($cacheKey, function ($item) use ($url, $query) {
            $item->expiresAfter(10800);
            $response = $this->tmdbHttpClient->request('GET', $url, ['query' => $query]);
            return $this->denormalizer->denormalize($response->toArray(), DiscoverMovie::class);
        });
    }

    /**
     * /3/discover/tv - Find TV shows using over 30 filters and sort options.
     * @param ?string $withWatchProviders use in conjunction with `watch_region`, can be a comma (`AND`) or pipe (`OR`) separated query
     * @param ?string $withStatus possible values are: [0, 1, 2, 3, 4, 5], can be a comma (`AND`) or pipe (`OR`) separated query
     * @param ?string $withKeywords can be a comma (`AND`) or pipe (`OR`) separated query
     * @param ?string $withCompanies can be a comma (`AND`) or pipe (`OR`) separated query
     * @param ?string $withGenres can be a comma (`AND`) or pipe (`OR`) separated query
     * @param ?string $withWatchMonetizationTypes possible values are: [flatrate, free, ads, rent, buy] use in conjunction with `watch_region`, can be a comma (`AND`) or pipe (`OR`) separated query
     * @param ?string $watchRegion use in conjunction with `with_watch_monetization_types ` or `with_watch_providers `
     * @param ?string $withType possible values are: [0, 1, 2, 3, 4, 5, 6], can be a comma (`AND`) or pipe (`OR`) separated query
     */
    public function discoverTv(?string $withWatchProviders = null, ?string $withoutGenres = null, ?int $withRuntimeGte = null, ?string $withStatus = null, ?string $withKeywords = null, ?string $withOriginCountry = null, ?string $language = 'en-US', ?string $withCompanies = null, ?bool $includeAdult = false, ?bool $includeNullFirstAirDates = false, ?string $firstAirDateLte = null, ?string $firstAirDateGte = null, ?int $firstAirDateYear = null, ?string $withoutWatchProviders = null, ?int $page = 1, ?string $airDateLte = null, ?bool $screenedTheatrically = null, ?string $withGenres = null, ?string $sortBy = 'popularity.desc', ?int $withNetworks = null, ?string $timezone = null, ?string $withOriginalLanguage = null, ?float $voteAverageGte = null, ?int $withRuntimeLte = null, ?float $voteAverageLte = null, ?string $withWatchMonetizationTypes = null, ?float $voteCountGte = null, ?string $withoutCompanies = null, ?float $voteCountLte = null, ?string $withoutKeywords = null, ?string $watchRegion = null, ?string $withType = null, ?string $airDateGte = null): DiscoverTv
    {
        $url = strtr('/3/discover/tv', [
        ]);
        $query = [
            'air_date.gte' => $airDateGte,
            'air_date.lte' => $airDateLte,
            'first_air_date_year' => $firstAirDateYear,
            'first_air_date.gte' => $firstAirDateGte,
            'first_air_date.lte' => $firstAirDateLte,
            'include_adult' => $includeAdult,
            'include_null_first_air_dates' => $includeNullFirstAirDates,
            'language' => $language,
            'page' => $page,
            'screened_theatrically' => $screenedTheatrically,
            'sort_by' => $sortBy,
            'timezone' => $timezone,
            'vote_average.gte' => $voteAverageGte,
            'vote_average.lte' => $voteAverageLte,
            'vote_count.gte' => $voteCountGte,
            'vote_count.lte' => $voteCountLte,
            'watch_region' => $watchRegion,
            'with_companies' => $withCompanies,
            'with_genres' => $withGenres,
            'with_keywords' => $withKeywords,
            'with_networks' => $withNetworks,
            'with_origin_country' => $withOriginCountry,
            'with_original_language' => $withOriginalLanguage,
            'with_runtime.gte' => $withRuntimeGte,
            'with_runtime.lte' => $withRuntimeLte,
            'with_status' => $withStatus,
            'with_watch_monetization_types' => $withWatchMonetizationTypes,
            'with_watch_providers' => $withWatchProviders,
            'without_companies' => $withoutCompanies,
            'without_genres' => $withoutGenres,
            'without_keywords' => $withoutKeywords,
            'without_watch_providers' => $withoutWatchProviders,
            'with_type' => $withType,
        ];

        $cacheKey = md5($url.'?'.http_build_query($query));
        return $this->redis->get($cacheKey, function ($item) use ($url, $query) {
            $item->expiresAfter(10800);
            $response = $this->tmdbHttpClient->request('GET', $url, ['query' => $query]);
            return $this->denormalizer->denormalize($response->toArray(), DiscoverTv::class);
        });
    }
}