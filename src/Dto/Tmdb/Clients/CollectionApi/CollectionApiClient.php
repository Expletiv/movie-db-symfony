<?php

namespace App\Dto\Tmdb\Clients\CollectionApi;

use Symfony\Contracts\HttpClient\HttpClientInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Contracts\Cache\CacheInterface;
use App\Dto\Tmdb\Responses\Collection\CollectionDetails;
use App\Dto\Tmdb\Responses\Collection\CollectionImages;
use App\Dto\Tmdb\Responses\Collection\CollectionTranslations;

/**
 * This class was auto generated by the TMDB DTO Generator.
 * Do not edit this file manually!
 */
readonly class CollectionApiClient implements CollectionApiInterface
{
    public function __construct(
        private HttpClientInterface $tmdbHttpClient,
        private DenormalizerInterface $denormalizer,
        private CacheInterface $redis,
    )
    {
    }

    /**
     * /3/collection/{collection_id} - Get collection details by ID.
     */
    public function collectionDetails(int $collectionId, ?string $language = 'en-US'): CollectionDetails
    {
        $url = strtr('/3/collection/{collection_id}', [
            '{collection_id}' => $collectionId,
        ]);
        $query = [
            'language' => $language,
        ];

        $cacheKey = md5($url.'?'.http_build_query($query));
        return $this->redis->get($cacheKey, function ($item) use ($url, $query) {
            $item->expiresAfter(10800);
            $response = $this->tmdbHttpClient->request('GET', $url, ['query' => $query]);
            return $this->denormalizer->denormalize($response->toArray(), CollectionDetails::class);
        });
    }

    /**
     * /3/collection/{collection_id}/images - Get the images that belong to a collection.
     * @param ?string $includeImageLanguage specify a comma separated list of ISO-639-1 values to query, for example: `en,null`
     */
    public function collectionImages(int $collectionId, ?string $language = null, ?string $includeImageLanguage = null): CollectionImages
    {
        $url = strtr('/3/collection/{collection_id}/images', [
            '{collection_id}' => $collectionId,
        ]);
        $query = [
            'include_image_language' => $includeImageLanguage,
            'language' => $language,
        ];

        $cacheKey = md5($url.'?'.http_build_query($query));
        return $this->redis->get($cacheKey, function ($item) use ($url, $query) {
            $item->expiresAfter(10800);
            $response = $this->tmdbHttpClient->request('GET', $url, ['query' => $query]);
            return $this->denormalizer->denormalize($response->toArray(), CollectionImages::class);
        });
    }

    /**
     * /3/collection/{collection_id}/translations
     */
    public function collectionTranslations(int $collectionId): CollectionTranslations
    {
        $url = strtr('/3/collection/{collection_id}/translations', [
            '{collection_id}' => $collectionId,
        ]);
        $query = [
        ];

        $cacheKey = md5($url.'?'.http_build_query($query));
        return $this->redis->get($cacheKey, function ($item) use ($url, $query) {
            $item->expiresAfter(10800);
            $response = $this->tmdbHttpClient->request('GET', $url, ['query' => $query]);
            return $this->denormalizer->denormalize($response->toArray(), CollectionTranslations::class);
        });
    }
}