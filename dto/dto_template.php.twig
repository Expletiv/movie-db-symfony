{% autoescape false %}
<?php

namespace {{ namespace }};

use Symfony\Component\PropertyInfo\Extractor\PhpDocExtractor;
use Symfony\Component\PropertyInfo\PropertyInfoExtractor;
use Symfony\Component\Serializer\Annotation\SerializedName;
use Symfony\Component\Serializer\NameConverter\CamelCaseToSnakeCaseNameConverter;
use Symfony\Component\Serializer\Normalizer\ArrayDenormalizer;
use Symfony\Component\Serializer\Normalizer\ObjectNormalizer;
use Symfony\Component\Serializer\Serializer;

/**
 * This class was auto generated by the TMDB DTO Generator.
 * Do not edit this file manually!
 */
class {{ className }}
{
{% for name, property in properties %}
{% if property.type starts with 'array' %}
    /**
     * @var {{ property.type }}
     */
{% endif %}
    #[SerializedName('{{ name }}')]
    private {% if not (property.type starts with 'array') %}?{% endif %}{{ property.type|mapType }} ${{ name|camelCase }} = {% if property.type starts with 'array' %}[]{% else %}null{% endif %};
{% endfor %}

    public static function fromArray(array $data = []): self
    {
        $typeExtractor = new PropertyInfoExtractor(typeExtractors: [new PhpDocExtractor(), new PropertyInfoExtractor()]);
        $serializer = new Serializer([new ObjectNormalizer(
            nameConverter: new CamelCaseToSnakeCaseNameConverter(),  propertyTypeExtractor: $typeExtractor),
            new ArrayDenormalizer()
        ]);
        return $serializer->denormalize($data, self::class);
    }

    public function toArray(): array
    {
        $typeExtractor = new PropertyInfoExtractor(typeExtractors: [new PhpDocExtractor(), new PropertyInfoExtractor()]);
        $serializer = new Serializer([new ObjectNormalizer(
            nameConverter: new CamelCaseToSnakeCaseNameConverter(),
            propertyTypeExtractor: $typeExtractor
        )]);
        return $serializer->normalize($this);
    }

{% for name, property in properties %}
{% if property.type starts with 'array' %}
    /**
     * @return {{ property.type }}
     */
{% endif %}
    public function get{{ name|pascalCase }}(): {% if not (property.type starts with 'array') %}?{% endif %}{{ property.type|mapType }}
    {
        return $this->{{ name|camelCase }};
    }

{% if property.type starts with 'array' %}
    /**
     * @param {{ property.type }} ${{ name|camelCase }}
     */
{% endif %}
    public function set{{ name|pascalCase }}({% if not (property.type starts with 'array') %}?{% endif %}{{ property.type|mapType }} ${{ name|camelCase }}): self
    {
        $this->{{ name|camelCase }} = ${{ name|camelCase }};

        return $this;
    }
{% if loop.last %}}{% else %}

{% endif %}
{% endfor %}
{% endautoescape %}
