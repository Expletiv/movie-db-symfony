{% autoescape false %}
<?php

namespace {{ namespace }};

use Symfony\Contracts\HttpClient\HttpClientInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Contracts\Cache\CacheInterface;
{% for path in paths|filter(path => path.actual_type != path.actual_type|lower) %}
use {{ path.response_fqcn }};
{% endfor %}

/**
 * This class was auto generated by the TMDB DTO Generator.
 * Do not edit this file manually!
 */
readonly class {{ className }} implements {{ interfaceName }}
{
    public function __construct(
        private HttpClientInterface $tmdbHttpClient,
        private DenormalizerInterface $denormalizer,
        private CacheInterface $redis,
    )
    {
    }

{% for path in paths %}
    /**
     * {{ path.path }}{% if path.description != '' %} - {{ path.description }}{% endif %}

{% for param in path.parameters|sort((a, b) => a.required is defined <= b.required is defined) %}
{% if param.description is defined %}
     * @param {% if param.required is not defined %}?{% endif %}{{ param.schema.type|mapType }} ${{ param.name|camelCase }} {{ param.description }}
{% endif %}
{% endfor %}
{% if path.response_type starts with 'array<' %}
     * @return {{ path.response_type }}
{% endif %}
     */
    public function {{ path.operation }}({% for param in path.parameters|sort((a, b) => a.required is defined <= b.required is defined) %}{% if param.required is not defined %}?{% endif %}{{ param.schema.type|mapType }} ${{ param.name|camelCase }}{% if param.required is not defined %} = {% if param.schema.default is defined %}{% if param.schema.type == 'string' %}'{{ param.schema.default }}'{% elseif param.schema.type == 'boolean' %}{{ param.schema.default ? 'true' : 'false' }}{% else %}{{ param.schema.default }}{% endif %}{% else %}null{% endif %}{% endif %}{% if loop.last %}{% else %}, {% endif %}{% endfor %}): {{ path.response_type|mapType }}
    {
        $url = strtr('{{ path.path }}', [
{% for param in path.parameters|filter(param => param.in == 'path') %}
            '{{ '{' ~ param.name ~ '}' }}' => ${{ param.name|camelCase }},
{% endfor %}
        ]);
        $query = [
{% for param in path.parameters|filter(param => param.in == 'query') %}
            '{{ param.name }}' => ${{ param.name|camelCase }},
{% endfor %}
        ];

        $cacheKey = md5($url . json_encode($query));
        return $this->redis->get($cacheKey, function ($item) use ($url, $query) {
            $item->expiresAfter(10800);
            $response = $this->tmdbHttpClient->request('GET', $url, ['query' => $query]);
{% if path.actual_type != path.actual_type|lower %}
            return $this->denormalizer->denormalize($response->toArray(), {{ path.actual_type|mapType }}::class{% if path.response_type|mapType == 'array' %} . '[]'{% endif %});
{% else %}
            return $response->toArray();
{% endif %}
        });
    }
{% if loop.last %}}{% else %}

{% endif %}
{% endfor %}
{% endautoescape %}
